<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on keepSTEEP</title><link>https://oudon-mizusawa.github.io/keepSTEEP/posts/</link><description>Recent content in Posts on keepSTEEP</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 09 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oudon-mizusawa.github.io/keepSTEEP/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Androidのヒープ領域</title><link>https://oudon-mizusawa.github.io/keepSTEEP/posts/001/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://oudon-mizusawa.github.io/keepSTEEP/posts/001/</guid><description>Linux ヒープ 搭載されている物理的なRAMの全領域を扱って、android OS 全体に使われる。OS やカーネルに割り当てられるメモリの他に、以下のアプリケーションヒープも含まれる。 アプリケーションヒープ 各アプリケーション毎に OS によって割り当てられるメモリ領域で、多くの機種でデフォルトで 16MB ほど。JDK で作られたアプリケーションはこのメモリを使う。このヒープも大きく分けて２種類に分類される。 Dalvik (Java) ヒープ: Dalvik (Java) が使う変数などを配置するメモリ。 ネイティブヒープ: Bitmap などのリソースで扱うメモリ。 参考</description></item><item><title>Linux VPN周りのトンネリングってどの辺で実装してるの？</title><link>https://oudon-mizusawa.github.io/keepSTEEP/posts/002/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://oudon-mizusawa.github.io/keepSTEEP/posts/002/</guid><description>TUN/TAPと呼ばれる仮想NICで実現しているらしい。
ここで湧いてくる疑問は、「なぜ、tun/tupの仮想インターネットデバイスを作ると全ての通信がそこ経由になるのか？」ということになるが、その辺はここに詳しく書いてある。</description></item><item><title>nmapの使い方</title><link>https://oudon-mizusawa.github.io/keepSTEEP/posts/003/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://oudon-mizusawa.github.io/keepSTEEP/posts/003/</guid><description>こちらを参考に以下まとめ。
隣接した複数のホストから成るネットワーク全体をスキャン対象としたい場合は、CIDR表記のアドレス指定を利用 Admin権限やroot権限を使ってnmapを使う必要がある。これは、ARP要求などはUNIXシステムなどにおいては、root権限が必要だからである。 SYN Scanはスキャン速度が早く、TCPコネクションを確立しないので秘匿性が高い。但し、知らないSYNパケットを捨てるといった処理をするデバイスに対しては効果がなかったりするので注意 OSのフィンガープリントの採取方法としては、例えばftpへの接続などを行い、そこで返された応答などから特定のOSかどうかをnmapが持っているDBと突合させるなどがある。</description></item></channel></rss>